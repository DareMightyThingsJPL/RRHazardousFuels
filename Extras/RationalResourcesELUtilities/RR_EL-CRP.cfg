// Author: VeronikaKerman
// Forces ExtraplanetaryLaunchpads to use Community Resource Pack's MetallicOre and Metals resources and not its own MetalOre, Metal resources

@EL_ConverterRecipe:NEEDS[communityResourcePack,Launchpad]
{
	@Input:HAS[#MetalOre]
	{
		MetallicOre = #$MetalOre$
	}
	@Input:HAS[#Metal]
	{
		Metals = #$Metal$
	}
	@Output:HAS[#Metal]
	{
		Metals = #$Metal$
	}
	@Input
	{
		!MetalOre = 0
		!Metal = 0
	}
	@Output
	{
		!MetalOre = 0
		!Metal = 0
	}
}

@EL_ModuleRecipe:NEEDS[communityResourcePack,Launchpad]
{
	@Resources:HAS[#Metal]
	{
		Metals = #$Metal$
	}
	@Resources
	{
		!Metal = 0
	}
}

@PART[PotatoRoid]:AFTER[Launchpad]
{
	!MODULE[ModuleAsteroidResource]:HAS[#resourceName[MetalOre]] {}
}

@PART[SurfaceScanner]:AFTER[Launchpad]
{
	!MODULE[ModuleAnalysisResource]:HAS[#resourceName[MetalOre]] {}
}

//!RESOURCE_DEFINITION[Metal] {}
//!RESOURCE_DEFINITION[MetalOre] {}
!GLOBAL_RESOURCE:HAS[#ResourceName[MetalOre]] {}
!PLANETARY_RESOURCE:HAS[#ResourceName[MetalOre]] {}
!BIOME_RESOURCE:HAS[#ResourceName[MetalOre]] {}

@PART[EL*]:NEEDS[communityResourcePack,Launchpad]
{
	@MODULE[ELExtractor]:HAS[#ResourceName[MetalOre]]
	{
		@ConverterName = #LOC_CRP_MetallicOre_DisplayName
		@ResourceName = MetallicOre
	}
	@MODULE[ModuleResourceScanner]:HAS[#ResourceName[MetalOre]]
	{
		@ResourceName = MetallicOre
	}
	@MODULE[ModuleAnalysisResource]:HAS[#resourceName[MetalOre]]
	{
		@resourceName = MetallicOre
	}
	@MODULE[KethaneDetector]
	{
		@Resource[MetalOre]
		{
			@name = MetallicOre
		}
	}
}

// Patch anything that converts these resources
@PART:HAS[@MODULE[ModuleResourceConverter]]:NEEDS[communityResourcePack,Launchpad]:FOR[zRationalResources] 
{
	@MODULE[ModuleResourceConverter],*
	{
		@INPUT_RESOURCE:HAS[#ResourceName[Metal]]
		{
			@ResourceName = Metals
			@Ratio *= 5
		}
		@OUTPUT_RESOURCE:HAS[#ResourceName[Metal]]
		{
			@ResourceName = Metals
			@Ratio *= 5
		}
		@INPUT_RESOURCE:HAS[#ResourceName[MetalOre]]
		{
			@ResourceName = MetallicOre
			@Ratio *= 4.7272
		}
	}
}

// Patch anything that tanks these resources
@PART:HAS[@RESOURCE[Metal*]]:NEEDS[communityResourcePack,Launchpad]:FOR[zRationalResources]
{
	@RESOURCE[Metal]
	{
		@name = Metals
		@amount *= 5 // #$@RESOURCE_DEFINITION[Metal]/volume$
		@maxAmount *= 5 // #$@RESOURCE_DEFINITION[Metal]/volume$
	}
	@RESOURCE[MetalOre]
	{
		@name = MetallicOre
		@amount *= 5 // #$@RESOURCE_DEFINITION[MetalOre]/volume$
		@maxAmount *= 5 // #$@RESOURCE_DEFINITION[MetalOre]/volume$
	}
}

// EL Tanks
@PART[Rocketparts*7x|HexCanRocketParts*|ELTank*RP]:NEEDS[communityResourcePack,Launchpad]
{
	@title = #EL $title$
	refVolume = #$RESOURCE[RocketParts/maxAmount]$
	// @refVolume *= 5
	!RESOURCE[RocketParts] {}
	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = RRSwitch
		switcherDescription = RR Selection
		switcherDescriptionPlural = RR Selections
		switchInFlight = True
		baseVolume = #$../refVolume$
		SUBTYPE
		{
			name = RocketParts
			tankType = RR_RocketParts
			title = RocketParts
			primaryColor = PumpkinOrange
			secondaryColor = PumpkinOrange
		}
		SUBTYPE
		{
			name = Metal
			tankType = RR_Metals
			title = Metal
			primaryColor = Gunmetal
			secondaryColor = Gunmetal
		}
		SUBTYPE
		{
			name = MetalOre
			tankType = RR_MetallicOre
			title = MetalOre
			primaryColor = BrownishGrey
			secondaryColor = BrownishGrey
		}
		SUBTYPE
		{
			name = ScrapMetal
			title = ScrapMetal
			primaryColor = Grey
			secondaryColor = Grey
			RESOURCE
			{
				name = ScrapMetal
				unitsPerVolume = 1
				percentFilled = 0
			}
		}
	}
}

@PART[HexCan*|ELTank*]:HAS[~refVolume]:NEEDS[communityResourcePack,Launchpad]
{
	%TechHidden = true
	@category = none
}


// = = Wild Blue Industries (Pathfinder, DSEV, Buffalo, etc.) = =
// This section by: @ 0xE1E10 on GitHub


// Tanks
@STORAGE_TEMPLATE:NEEDS[WildBlueTools,CommunityResourcePack]:FOR[zRationalResources]
{
	@RESOURCE[Metal]
	{
		@name = Metals
		@amount *= 5 // #$@RESOURCE_DEFINITION[Metal]/volume$
		@maxAmount *= 5 // #$@RESOURCE_DEFINITION[Metal]/volume$
	}
	@RESOURCE[MetalOre]
	{
		@name = MetallicOre
		@amount *= 5 // #$@RESOURCE_DEFINITION[MetalOre]/volume$
		@maxAmount *= 5 // #$@RESOURCE_DEFINITION[MetalOre]/volume$
	}
}

@PATH_INDUSTRY:HAS[@RESOURCE[Metal*]]:NEEDS[CommunityResourcePack,Launchpad,Pathfinder]:FOR[zRationalResources]
{
	@RESOURCE[Metal]
	{
		@name = Metals
		@amount *= 5 // #$@RESOURCE_DEFINITION[Metal]/volume$
		@maxAmount *= 5 // #$@RESOURCE_DEFINITION[Metal]/volume$
	}
	@RESOURCE[MetalOre]
	{
		@name = MetallicOre
		@amount *= 5 // #$@RESOURCE_DEFINITION[MetalOre]/volume$
		@maxAmount *= 5 // #$@RESOURCE_DEFINITION[MetalOre]/volume$
	}
}

// Converters
@PATH_INDUSTRY:HAS[@MODULE[ModuleResourceConverter]]:NEEDS[CommunityResourcePack,Launchpad,Pathfinder]:FOR[zRationalResources]
{
	@MODULE[ModuleResourceConverter],*
	{
		@INPUT_RESOURCE:HAS[#ResourceName[Metal]]
		{
			@ResourceName = Metals
			@Ratio *= 5
		}
		@OUTPUT_RESOURCE:HAS[#ResourceName[Metal]]
		{
			@ResourceName = Metals
			@Ratio *= 5
		}
		@INPUT_RESOURCE:HAS[#ResourceName[MetalOre]]
		{
			@ResourceName = MetallicOre
			@Ratio *= 4.7272
		}
	}
}

@OMNICONVERTER:HAS[@INPUT_RESOURCE:HAS[#ResourceName[Metal*]]]:NEEDS[WildBlueTools,CommunityResourcePack]:FOR[zRationalResources]
{
	@INPUT_RESOURCE:HAS[#ResourceName[Metal]]
	{
		@ResourceName = Metals
		@Ratio *= 5
	}
	@INPUT_RESOURCE:HAS[#ResourceName[MetalOre]]
	{
		@ResourceName = MetallicOre
		@Ratio *= 4.7272
	}
}

@OMNICONVERTER:HAS[@OUTPUT_RESOURCE:HAS[#ResourceName[Metal*]]]:NEEDS[WildBlueTools,CommunityResourcePack]:FOR[zRationalResources]
{
	@OUTPUT_RESOURCE:HAS[#ResourceName[Metal]]
	{
		@ResourceName = Metals
		@Ratio *= 5
	}
}
