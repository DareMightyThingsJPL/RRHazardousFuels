// WBI Classic Stock: Monopropellant (main block)

@PART:HAS[#RationalResourcesRCSMP[True],@MODULE[ModuleRCSFX]]:FOR[RationalResourcesRCSFamily]:NEEDS[B9PartSwitch,ClassicStock]
{
	IspASL = #$MODULE[ModuleRCSFX]/atmosphereCurve/key,1[1, ]$ // get ASL Isp number
	IspVac = #$MODULE[ModuleRCSFX]/atmosphereCurve/key,0[1, ]$ // get vac Isp number
	
	// set fractions for div operation
	IspMultAtm = 0.29 // 70 / 240 (Chosen CompressedAtmosphere Isp over stock MonoPropellant RCS Isp)
	IspMultPLM = 1.13 // 272 / 240 (Chosen Propellium Isp over stock MonoPropellant Isp)
	IspMultN2O = 0.71 // 171.4 / 240 (Chosen Nitronite Isp over stock MonoPropellant Isp)
	IspMultXe = 0.12 // 28 / 240 (Chosen XenonGas Isp over stock MonoPropellant Isp)
	IspMultRPT = 0.44 // 105 / 240 (Chosen Raptium Isp over stock MonoPropellant Isp)

	// precision sequence to keep div number at 2dp and not let it be 12+dp
	// no longer needed
	// @IspMultH2 += 0.005
	// @IspMultH2 *= 100
	// @IspMultH2 = #$IspMultH2[0,.]$ // regex truncate, unknown behavior but used in RO
	// @IspMultH2 /= 100
	
	// save Isp's
	IspVacAtm = #$IspVac$
	IspASLAtm = #$IspASL$
	@IspVacAtm *= #$IspMultAtm$
	@IspASLAtm *= #$IspMultAtm$
	
	IspVacPLM = #$IspVac$
	IspASLPLM = #$IspASL$
	@IspVacPLM *= #$IspMultPLM$
	@IspASLPLM *= #$IspMultPLM$
	
	IspVacN2O = #$IspVac$
	IspASLN2O = #$IspASL$
	@IspVacN2O *= #$IspMultN2O$
	@IspASLN2O *= #$IspMultN2O$
	
	IspVacXe = #$IspVac$
	IspASLXe = #$IspASL$
	@IspVacXe *= #$IspMultXe$
	@IspASLXe *= #$IspMultXe$
	
	IspVacRPT = #$IspVac$
	IspASLRPT = #$IspASL$
	@IspVacRPT *= #$IspMultRPT$
	@IspASLRPT *= #$IspMultRPT$

	@description ^= :$: <br><#4FBBFF>RCS can accept other fuels.</color>
	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = RCS
		switcherDescription = RCS Mode
		switcherDescriptionPlural = RCS Modes
		switchInFlight = True
		SUBTYPE
		{
			name = MonoPropellant
			title = MonoPropellant
			primaryColor = ResourceColorMonoPropellant
			secondaryColor = ResourceColorMonoPropellant
			descriptionDetail = #Uses MonoPropellant.<br><b>Isp:</b> $/IspASL$ / $/IspVac$s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleRCSFX
				}
				DATA
				{
					thrusterPower = #$/MODULE[ModuleRCSFX]/thrusterPower$
					resourceName = MonoPropellant
					PROPELLANT
					{
						name = MonoPropellant
						ratio = 1
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleRCSFX]/atmosphereCurve {}
				}
			}
		}
		SUBTYPE
		{
			name = CompressedAtmosphere
			title = CompressedAtmosphere
			primaryColor = WarmGrey
			secondaryColor = WarmGrey
			descriptionDetail = #Uses Compressed Atmosphere.<br><b>Isp:</b> <color="yellow">$/IspASLAtm$ / $/IspVacAtm$</color>s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleRCSFX
				}
				DATA
				{
					thrusterPower = #$/MODULE[ModuleRCSFX]/thrusterPower$
					resourceName = CompressedAtmosphere
					PROPELLANT
					{
						name = CompressedAtmosphere
						ratio = 1
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleRCSFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVacAtm$
						@key,1[1, ] = #$/IspASLAtm$
					}
				}
			}
		}
		SUBTYPE
		{
			name = Propellium
			title = Propellium
			primaryColor = Lightblue
			secondaryColor = Lightblue
			descriptionDetail = #Uses Propellium gas.<br><b>Isp:</b> <color="yellow">$/IspASLPLM$ / $/IspVacPLM$</color>s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleRCSFX
				}
				DATA
				{
					thrusterPower = #$/MODULE[ModuleRCSFX]/thrusterPower$
					resourceName = Propellium
					PROPELLANT
					{
						name = Propellium
						ratio = 1
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleRCSFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVacPLM$
						@key,1[1, ] = #$/IspASLPLM$
					}
				}
			}
		}
		SUBTYPE
		{
			name = Nitronite
			title = Nitronite
			primaryColor = ResourceColorMonoPropellant
			secondaryColor = ResourceColorMonoPropellant
			descriptionDetail = #Uses Nitronite gas.<br><b>Isp:</b> <color="yellow">$/IspASLN2O$ / $/IspVacN2O$</color>s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleRCSFX
				}
				DATA
				{
					thrusterPower = #$/MODULE[ModuleRCSFX]/thrusterPower$
					resourceName = Nitronite
					PROPELLANT
					{
						name = Nitronite
						ratio = 1
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleRCSFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVacN2O$
						@key,1[1, ] = #$/IspASLN2O$
					}
				}
			}
		}
		SUBTYPE
		{
			name = XenonGas
			title = XenonGas
			primaryColor = ResourceColorXenonGas
			secondaryColor = ResourceColorXenonGas
			descriptionDetail = #Uses Xenon gas.<br><b>Isp:</b> <color="yellow">$/IspASLXe$ / $/IspVacXe$</color>s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleRCSFX
				}
				DATA
				{
					thrusterPower = #$/MODULE[ModuleRCSFX]/thrusterPower$
					resourceName = XenonGas
					PROPELLANT
					{
						name = XenonGas
						ratio = 1
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleRCSFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVacXe$
						@key,1[1, ] = #$/IspASLXe$
					}
				}
			}
		}
		SUBTYPE
		{
			name = Raptium
			title = Raptium
			primaryColor = PurpleyPink
			secondaryColor = PurpleyPink
			descriptionDetail = #Uses Raptium gas.<br><b>Isp:</b> <color="yellow">$/IspASLRPT$ / $/IspVacRPT$</color>s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleRCSFX
				}
				DATA
				{
					thrusterPower = #$/MODULE[ModuleRCSFX]/thrusterPower$
					resourceName = Raptium
					PROPELLANT
					{
						name = Raptium
						ratio = 1
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleRCSFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVacRPT$
						@key,1[1, ] = #$/IspASLRPT$
					}
				}
			}
		}
	}
}

// WBI Classic Stock: Monopropellant (cleanup)

@PART:HAS[#RationalResourcesRCSMP[True],@MODULE[ModuleRCSFX]]:FOR[RationalResourcesRCSFamily]:NEEDS[B9PartSwitch,ClassicStock]
{
	!IspMultAtm = nope
	!IspMultPLM = nope
	!IspMultN2O = nope
	!IspMultXe = nope
	!IspMultRPT = nope

	!IspASL = nope
	!IspVac = nope
	
	!IspVacAtm = nope
	!IspASLAtm = nope

	!IspVacPLM = nope
	!IspASLPLM = nope

	!IspVacN2O = nope
	!IspASLN2O = nope

	!IspVacXe = nope
	!IspASLXe = nope

	!IspVacRPT = nope
	!IspASLRPT = nope
}

// WBI Classic Stock: LFO (main block)

@PART:HAS[#RationalResourcesRCSLFO[True],@MODULE[ModuleRCSFX]]:FOR[RationalResourcesRCSFamily]:NEEDS[B9PartSwitch,ClassicStock]
{
	IspVac = #$MODULE[ModuleRCSFX]/atmosphereCurve/key,0[1, ]$ // get vac Isp number
	IspASL = #$MODULE[ModuleRCSFX]/atmosphereCurve/key,1[1, ]$ // get ASL Isp number
	
	// set fractions for div operation
	IspMultPLM = 1.5 // 390 / 260 (Chosen Propellium Isp over stock LFO RCS Isp)
	IspMultRPT = 1.33 // 346 / 260 (Chosen Raptium Isp over stock LFO Isp)

	// precision sequence to keep div number at 2dp and not let it be 12+dp
	// no longer needed
	// @IspMultPLM += 0.005
	// @IspMultPLM *= 100
	// @IspMultPLM = #$IspMultPLM[0,.]$ // regex truncate, unknown behavior but used in RO
	// @IspMultPLM /= 100
	
	// save Isp's
	IspVacPLM = #$IspVac$
	IspASLPLM = #$IspASL$
	@IspVacPLM *= #$IspMultPLM$
	@IspASLPLM *= #$IspMultPLM$

	IspVacRPT = #$IspVac$
	IspASLRPT = #$IspASL$
	@IspVacRPT *= #$IspMultRPT$
	@IspASLRPT *= #$IspMultRPT$
	
	@description ^= :$: <br><#4FBBFF>RCS can accept other fuels.</color>
	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = RCS
		switcherDescription = RCS Mode
		switcherDescriptionPlural = RCS Modes
		switchInFlight = True
		SUBTYPE
		{
			name = LFO
			title = Kerolox
			primaryColor = ResourceColorLiquidFuel
			secondaryColor = ResourceColorOxidizer
			descriptionDetail = #Uses LiquidFuel + Oxidizer.<br><b>Isp:</b> $/IspASL$ / $/IspVac$s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleRCSFX
				}
				DATA
				{
					thrusterPower = #$/MODULE[ModuleRCSFX]/thrusterPower$ // thrust will change if the Isp is changed and thrusterPower is not re-declared
					PROPELLANT
					{
						name = LiquidFuel
						ratio = 0.45
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					PROPELLANT
					{
						name = Oxidizer
						ratio = 0.55
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleRCSFX]/atmosphereCurve {}
				}
			}
		}
		SUBTYPE
		{
			name = PropLox
			title = PropLox
			primaryColor = ResourceColorLqdHydrogen
			secondaryColor = ResourceColorOxidizer
			defaultSubtypePriority = 2
			descriptionDetail = #Uses Propellium + Oxidizer.<br><b>Isp:</b> <color="yellow">$/IspASLPLM$ / $/IspVacPLM$</color>s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleRCSFX
				}
				DATA
				{
					thrusterPower = #$/MODULE[ModuleRCSFX]/thrusterPower$
					PROPELLANT
					{
						name = Propellium
						ratio = 3
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					PROPELLANT
					{
						name = Oxidizer
						ratio = 1
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleRCSFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVacPLM$
						@key,1[1, ] = #$/IspASLPLM$
					}
				}
			}
		}
		SUBTYPE
		{
			name = Raptalox
			title = Raptalox
			primaryColor = PurpleyPink
			secondaryColor = ResourceColorOxidizer
			defaultSubtypePriority = 2
			descriptionDetail = #Uses Raptium + Oxidizer.<br><b>Isp:</b> <color="yellow">$/IspASLRPT$ / $/IspVacRPT$</color>s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleRCSFX
				}
				DATA
				{
					thrusterPower = #$/MODULE[ModuleRCSFX]/thrusterPower$
					PROPELLANT
					{
						name = Raptium
						ratio = 3
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					PROPELLANT
					{
						name = Oxidizer
						ratio = 1
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleRCSFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVacRPT$
						@key,1[1, ] = #$/IspASLRPT$
					}
				}
			}
		}
	}
}

// WBI Classic Stock: LFO (cleanup)

@PART:HAS[#RationalResourcesRCSLFO[True],@MODULE[ModuleRCSFX]]:FOR[RationalResourcesRCSFamily]:NEEDS[B9PartSwitch,ClassicStock]
{
	!Isp* = nope
}