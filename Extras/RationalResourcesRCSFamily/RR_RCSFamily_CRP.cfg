// CRP: Monopropellant (main block)

@PART:HAS[#RationalResourcesRCSMP[True],@MODULE[ModuleRCSFX]]:FOR[RationalResourcesRCSFamily]:NEEDS[B9PartSwitch,CommunityResourcePack,!ClassicStock]
{
	IspVac = #$MODULE[ModuleRCSFX]/atmosphereCurve/key,0[1, ]$ // get vac Isp number
	IspASL = #$MODULE[ModuleRCSFX]/atmosphereCurve/key,1[1, ]$ // get ASL Isp number
	
	// set fractions for div operation
	IspMultAtm = 0.29 // 70 / 240 (Chosen IntakeAtm Isp over stock MonoPropellant RCS Isp)
	IspMultH2 = 1.13 // 272 / 240 (Chosen Hydrogen Isp over stock MonoPropellant Isp)
	IspMultN2 = 0.3 // 73 / 240 (Chosen Nitrogen Isp over stock MonoPropellant Isp)
	IspMultAr = 0.22 // 52 / 240 (Chosen ArgonGas Isp over stock MonoPropellant Isp)
	IspMultXe = 0.12 // 28 / 240 (Chosen XenonGas Isp over stock MonoPropellant Isp)
	IspMultCH4 = 0.44 // 105 / 240 (Chosen Methane Isp over stock MonoPropellant Isp)
	IspMultNH3 = 0.4 // 96 / 240 (Chosen Ammonia Isp over stock MonoPropellant Isp)
	IspMultCO2 = 0.25 // 61 / 240 (Chosen CarbonDioxide Isp over stock MonoPropellant Isp)

	// precision sequence to keep div number at 2dp and not let it be 12+dp
	// no longer needed
	// @IspMultH2 += 0.005
	// @IspMultH2 *= 100
	// @IspMultH2 = #$IspMultH2[0,.]$ // regex truncate, unknown behavior but used in RO
	// @IspMultH2 /= 100
	
	// save Isp's
	IspVacAtm = #$IspVac$
	IspASLAtm = #$IspASL$
	@IspVacAtm *= #$IspMultAtm$
	@IspASLAtm *= #$IspMultAtm$

	IspVacH2 = #$IspVac$
	IspASLH2 = #$IspASL$
	@IspVacH2 *= #$IspMultH2$
	@IspASLH2 *= #$IspMultH2$

	IspVacN2 = #$IspVac$
	IspASLN2 = #$IspASL$
	@IspVacN2 *= #$IspMultN2$
	@IspASLN2 *= #$IspMultN2$

	IspVacAr = #$IspVac$
	IspASLAr = #$IspASL$
	@IspVacAr *= #$IspMultAr$
	@IspASLAr *= #$IspMultAr$

	IspVacXe = #$IspVac$
	IspASLXe = #$IspASL$
	@IspVacXe *= #$IspMultXe$
	@IspASLXe *= #$IspMultXe$

	IspVacCH4 = #$IspVac$
	IspASLCH4 = #$IspASL$
	@IspVacCH4 *= #$IspMultCH4$
	@IspASLCH4 *= #$IspMultCH4$

	IspVacNH3 = #$IspVac$
	IspASLNH3 = #$IspASL$
	@IspVacNH3 *= #$IspMultNH3$
	@IspASLNH3 *= #$IspMultNH3$

	IspVacCO2 = #$IspVac$
	IspASLCO2 = #$IspASL$
	@IspVacCO2 *= #$IspMultCO2$
	@IspASLCO2 *= #$IspMultCO2$

	@description ^= :$: <br><#4FBBFF>RR RCS Family. Fuel switching available.</color>
	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = RCS
		switcherDescription = RCS Mode
		switcherDescriptionPlural = RCS Modes
		switchInFlight = True
		SUBTYPE
		{
			name = MonoPropellant
			title = MonoPropellant
			primaryColor = ResourceColorMonoPropellant
			secondaryColor = ResourceColorMonoPropellant
			descriptionDetail = #Uses MonoPropellant.<br><b>Isp:</b> $/IspASL$ / $/IspVac$s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleRCSFX
				}
				DATA
				{
					thrusterPower = #$/MODULE[ModuleRCSFX]/thrusterPower$
					resourceName = MonoPropellant
					PROPELLANT
					{
						name = MonoPropellant
						ratio = 1
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleRCSFX]/atmosphereCurve {}
				}
			}
		}
		SUBTYPE
		{
			name = IntakeAtm
			title = IntakeAtm
			primaryColor = LightGrey
			secondaryColor = LightGrey
			descriptionDetail = #Uses IntakeAtm.<br><b>Isp:</b> <color="yellow">$/IspASLAtm$ / $/IspVacAtm$</color>s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleRCSFX
				}
				DATA
				{
					thrusterPower = #$/MODULE[ModuleRCSFX]/thrusterPower$
					resourceName = IntakeAtm
					PROPELLANT
					{
						name = IntakeAtm
						ratio = 1
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleRCSFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVacAtm$
						@key,1[1, ] = #$/IspASLAtm$
					}
				}
			}
		}
		SUBTYPE
		{
			name = LqdHydrogen
			title = LqdHydrogen
			primaryColor = ResourceColorLqdHydrogen
			secondaryColor = ResourceColorLqdHydrogen
			descriptionDetail = #Uses Liquid Hydrogen.<br><b>Isp:</b> <color="yellow">$/IspASLH2$ / $/IspVacH2$</color>s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleRCSFX
				}
				DATA
				{
					thrusterPower = #$/MODULE[ModuleRCSFX]/thrusterPower$
					resourceName = LqdHydrogen
					PROPELLANT
					{
						name = LqdHydrogen
						ratio = 1
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleRCSFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVacH2$
						@key,1[1, ] = #$/IspASLH2$
					}
				}
			}
		}
		SUBTYPE
		{
			name = LqdNitrogen
			title = LqdNitrogen
			primaryColor = PeacockBlue
			secondaryColor = PeacockBlue
			descriptionDetail = #Uses Liquid Nitrogen.<br><b>Isp:</b> <color="yellow">$/IspASLN2$ / $/IspVacN2$</color>s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleRCSFX
				}
				DATA
				{
					thrusterPower = #$/MODULE[ModuleRCSFX]/thrusterPower$
					resourceName = LqdNitrogen
					PROPELLANT
					{
						name = LqdNitrogen
						ratio = 1
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleRCSFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVacN2$
						@key,1[1, ] = #$/IspASLN2$
					}
				}
			}
		}
		SUBTYPE
		{
			name = ArgonGas
			title = ArgonGas
			primaryColor = Blush
			secondaryColor = Blush
			descriptionDetail = #Uses Argon gas.<br><b>Isp:</b> <color="yellow">$/IspASLAr$ / $/IspVacAr$</color>s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleRCSFX
				}
				DATA
				{
					thrusterPower = #$/MODULE[ModuleRCSFX]/thrusterPower$
					resourceName = ArgonGas
					PROPELLANT
					{
						name = ArgonGas
						ratio = 1
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleRCSFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVacAr$
						@key,1[1, ] = #$/IspASLAr$
					}
				}
			}
		}
		SUBTYPE
		{
			name = XenonGas
			title = XenonGas
			primaryColor = ResourceColorXenonGas
			secondaryColor = ResourceColorXenonGas
			descriptionDetail = #Uses Xenon gas.<br><b>Isp:</b> <color="yellow">$/IspASLXe$ / $/IspVacXe$</color>s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleRCSFX
				}
				DATA
				{
					thrusterPower = #$/MODULE[ModuleRCSFX]/thrusterPower$
					resourceName = XenonGas
					PROPELLANT
					{
						name = XenonGas
						ratio = 1
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleRCSFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVacXe$
						@key,1[1, ] = #$/IspASLXe$
					}
				}
			}
		}
		SUBTYPE
		{
			name = LqdMethane
			title = LqdMethane
			primaryColor = ResourceColorLqdMethane
			secondaryColor = ResourceColorLqdMethane
			descriptionDetail = #Uses Liquid Methane.<br><b>Isp:</b> <color="yellow">$/IspASLCH4$ / $/IspVacCH4$</color>s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleRCSFX
				}
				DATA
				{
					thrusterPower = #$/MODULE[ModuleRCSFX]/thrusterPower$
					resourceName = LqdMethane
					PROPELLANT
					{
						name = LqdMethane
						ratio = 1
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleRCSFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVacCH4$
						@key,1[1, ] = #$/IspASLCH4$
					}
				}
			}
		}
		SUBTYPE
		{
			name = LqdAmmonia
			title = LqdAmmonia
			primaryColor = BurntRed
			secondaryColor = BurntRed
			descriptionDetail = #Uses Liquid Ammonia.<br><b>Isp:</b> <color="yellow">$/IspASLNH3$ / $/IspVacNH3$</color>s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleRCSFX
				}
				DATA
				{
					thrusterPower = #$/MODULE[ModuleRCSFX]/thrusterPower$
					resourceName = LqdAmmonia
					PROPELLANT
					{
						name = LqdAmmonia
						ratio = 1
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleRCSFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVacNH3$
						@key,1[1, ] = #$/IspASLNH3$
					}
				}
			}
		}
		SUBTYPE
		{
			name = LqdCO2
			title = LqdCO2
			primaryColor = WarmGrey
			secondaryColor = WarmGrey
			descriptionDetail = #Uses Liquid Carbon Dioxide.<br><b>Isp:</b> <color="yellow">$/IspASLCO2$ / $/IspVacCO2$</color>s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleRCSFX
				}
				DATA
				{
					thrusterPower = #$/MODULE[ModuleRCSFX]/thrusterPower$
					resourceName = LqdCO2
					PROPELLANT
					{
						name = LqdCO2
						ratio = 1
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleRCSFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVacCO2$
						@key,1[1, ] = #$/IspASLCO2$
					}
				}
			}
		}
	}
}

// CRP: Monopropellant (cleanup)

@PART:HAS[#RationalResourcesRCSMP[True],@MODULE[ModuleRCSFX]]:FOR[RationalResourcesRCSFamily]:NEEDS[B9PartSwitch,CommunityResourcePack,!ClassicStock]
{
	!Isp* = nope
}

// CRP: LFO (main block)

@PART:HAS[#RationalResourcesRCSLFO[True],@MODULE[ModuleRCSFX]]:FOR[RationalResourcesRCSFamily]:NEEDS[B9PartSwitch,CommunityResourcePack,!ClassicStock]
{
	IspVac = #$MODULE[ModuleRCSFX]/atmosphereCurve/key,0[1, ]$ // get vac Isp number
	IspASL = #$MODULE[ModuleRCSFX]/atmosphereCurve/key,1[1, ]$ // get ASL Isp number
	
	// set fractions for div operation
	IspMultH2 = 1.46 // 380 / 260 (Chosen Hydrogen Isp over stock LFO RCS Isp)
	IspMultCH4 = 1.15 // 300 / 260 (Chosen Methane Isp over stock LFO Isp)

	// precision sequence to keep div number at 2dp and not let it be 12+dp
	// no longer needed
	// @IspMultH2 += 0.005
	// @IspMultH2 *= 100
	// @IspMultH2 = #$IspMultH2[0,.]$ // regex truncate, unknown behavior but used in RO
	// @IspMultH2 /= 100
	
	// save Isp's
	IspVacH2 = #$IspVac$
	IspASLH2 = #$IspASL$
	@IspVacH2 *= #$IspMultH2$
	@IspASLH2 *= #$IspMultH2$

	IspVacCH4 = #$IspVac$
	IspASLCH4 = #$IspASL$
	@IspVacCH4 *= #$IspMultCH4$
	@IspASLCH4 *= #$IspMultCH4$

	@description ^= :$: <br><#4FBBFF>RR RCS Family. Fuel switching available.</color>
	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = RCS
		switcherDescription = RCS Mode
		switcherDescriptionPlural = RCS Modes
		switchInFlight = True
		SUBTYPE
		{
			name = LFO
			title = Kerolox
			primaryColor = ResourceColorLiquidFuel
			secondaryColor = ResourceColorOxidizer
			descriptionDetail = #Uses LiquidFuel + Oxidizer.<br><b>Isp:</b> $/IspASL$ / $/IspVac$s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleRCSFX
				}
				DATA
				{
					thrusterPower = #$/MODULE[ModuleRCSFX]/thrusterPower$ // thrust will change if the Isp is changed and thrusterPower is not re-declared
					PROPELLANT
					{
						name = LiquidFuel
						ratio = 0.45
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					PROPELLANT
					{
						name = Oxidizer
						ratio = 0.55
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleRCSFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVac$
						@key,1[1, ] = #$/IspASL$
					}
				}
			}
		}
		SUBTYPE
		{
			name = Hydrolox
			title = Hydrolox
			primaryColor = ResourceColorLqdHydrogen
			secondaryColor = ResourceColorOxidizer
			descriptionDetail = #Uses LqdHydrogen + Oxidizer.<br><b>Isp:</b> <color="yellow">$/IspASLH2$ / $/IspVacH2$</color>s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleRCSFX
				}
				DATA
				{
					thrusterPower = #$/MODULE[ModuleRCSFX]/thrusterPower$
					PROPELLANT
					{
						name = LqdHydrogen
						ratio = 1.5
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					PROPELLANT
					{
						name = Oxidizer
						ratio = 0.1
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleRCSFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVacH2$
						@key,1[1, ] = #$/IspASLH2$
					}
				}
			}
		}
		SUBTYPE
		{
			name = Methalox
			title = Methalox
			primaryColor = ResourceColorLqdMethane
			secondaryColor = ResourceColorOxidizer
			descriptionDetail = #Uses LqdMethane + Oxidizer.<br><b>Isp:</b> <color="yellow">$/IspASLCH4$ / $/IspVacCH4$</color>s.
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleRCSFX
				}
				DATA
				{
					thrusterPower = #$/MODULE[ModuleRCSFX]/thrusterPower$
					PROPELLANT
					{
						name = LqdMethane
						ratio = 3
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					PROPELLANT
					{
						name = Oxidizer
						ratio = 1
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					#/MODULE[ModuleRCSFX]/atmosphereCurve {}
					@atmosphereCurve
					{
						@key,0[1, ] = #$/IspVacCH4$
						@key,1[1, ] = #$/IspASLCH4$
					}
				}
			}
		}
	}
	
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RCS]]:NEEDS[RealFuels]
	{
		!SUBTYPE[LFO] {}
		@SUBTYPE[Hydrolox]
		{
			@descriptionDetail = #Uses LqdHydrogen + LqdOxygen.<br><b>Isp:</b> <color="yellow">$/IspASLH2$ / $/IspVacH2$</color>s.
			@MODULE
			{
				@DATA
				{
					@PROPELLANT[LqdHydrogen]
					{
						@ratio = 0.745
					}
					@PROPELLANT[Oxidizer]
					{
						@name = LqdOxygen
						@ratio = 0.255
					}
				}
			}
		}
		@SUBTYPE[Methalox]
		{
			@descriptionDetail = #Uses LqdMethane + LqdOxygen.<br><b>Isp:</b> <color="yellow">$/IspASLCH4$ / $/IspVacCH4$</color>s.
			@MODULE
			{
				@DATA
				{
					@PROPELLANT[LqdMethane]
					{
						@ratio = 0.434
					}
					@PROPELLANT[Oxidizer]
					{
						@name = LqdOxygen
						@ratio = 0.566
					}
				}
			}
		}
	}
}

// CRP: LFO (cleanup)

@PART:HAS[#RationalResourcesRCSLFO[True],@MODULE[ModuleRCSFX]]:FOR[RationalResourcesRCSFamily]:NEEDS[B9PartSwitch,CommunityResourcePack,!ClassicStock]
{
	!Isp* = nope
}